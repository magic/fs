import { is, version, log } from '@magic/test'

import fso from 'fs'

import fs from '../src/index.mjs'

const spec = {
  appendFile: 'fn',
  appendFileSync: 'fn',
  access: 'fn',
  accessSync: 'fn',
  chown: 'fn',
  chownSync: 'fn',
  chmod: 'fn',
  chmodSync: 'fn',
  close: 'fn',
  closeSync: 'fn',
  copyFile: 'fn',
  copyFileSync: 'fn',
  cp: 'fn',
  cpSync: 'fn',
  createReadStream: 'fn',
  createWriteStream: 'fn',
  exists: 'fn',
  existsSync: 'fn',
  fchown: 'fn',
  fchownSync: 'fn',
  fchmod: 'fn',
  fchmodSync: 'fn',
  fdatasync: 'fn',
  fdatasyncSync: 'fn',
  fstat: 'fn',
  fstatSync: 'fn',
  fsync: 'fn',
  fsyncSync: 'fn',
  ftruncate: 'fn',
  ftruncateSync: 'fn',
  futimes: 'fn',
  futimesSync: 'fn',
  glob: 'fn',
  globSync: 'fn',
  lchown: 'fn',
  lchownSync: 'fn',
  lchmod: 'fn',
  lchmodSync: 'undefined',
  link: 'fn',
  linkSync: 'fn',
  lstat: 'fn',
  lstatSync: 'fn',
  lutimes: 'fn',
  lutimesSync: 'fn',
  mkdir: 'fn',
  mkdirSync: 'fn',
  mkdtemp: 'fn',
  mkdtempDisposable: 'fn',
  mkdtempDisposableSync: 'fn',
  mkdtempSync: 'fn',
  open: 'fn',
  openAsBlob: 'fn',
  openSync: 'fn',
  opendir: 'fn',
  opendirSync: 'fn',
  readdir: 'fn',
  readdirSync: 'fn',
  read: 'fn',
  readSync: 'fn',
  readv: 'fn',
  readvSync: 'fn',
  readFile: 'fn',
  readFileSync: 'fn',
  readlink: 'fn',
  readlinkSync: 'fn',
  realpath: 'fn',
  realpathSync: 'fn',
  rename: 'fn',
  renameSync: 'fn',
  rm: 'fn',
  rmSync: 'fn',
  rmdir: 'fn',
  rmdirSync: 'fn',
  stat: 'fn',
  statSync: 'fn',
  statfs: 'fn',
  statfsSync: 'fn',
  symlink: 'fn',
  symlinkSync: 'fn',
  Utf8Stream: 'fn',
  truncate: 'fn',
  truncateSync: 'fn',
  unwatchFile: 'fn',
  unlink: 'fn',
  unlinkSync: 'fn',
  utimes: 'fn',
  utimesSync: 'fn',
  watch: 'fn',
  watchFile: 'fn',
  writeFile: 'fn',
  writeFileSync: 'fn',
  write: 'fn',
  writeSync: 'fn',
  writev: 'fn',
  writevSync: 'fn',
  Dir: 'fn',
  Dirent: 'fn',
  Stats: 'fn',
  ReadStream: 'fn',
  WriteStream: 'fn',
  FileReadStream: 'fn',
  FileWriteStream: 'fn',
  _toUnixTimestamp: 'fn',
  F_OK: 'num',
  R_OK: 'num',
  W_OK: 'num',
  X_OK: 'num',
  constants: [
    'object',
    {
      EXTENSIONLESS_FORMAT_JAVASCRIPT: 'num',
      EXTENSIONLESS_FORMAT_WASM: 'num',
      UV_FS_SYMLINK_DIR: 'num',
      UV_FS_SYMLINK_JUNCTION: 'num',
      O_RDONLY: 'num',
      O_WRONLY: 'num',
      O_RDWR: 'num',
      UV_DIRENT_UNKNOWN: 'num',
      UV_DIRENT_FILE: 'num',
      UV_DIRENT_DIR: 'num',
      UV_DIRENT_LINK: 'num',
      UV_DIRENT_FIFO: 'num',
      UV_DIRENT_SOCKET: 'num',
      UV_DIRENT_CHAR: 'num',
      UV_DIRENT_BLOCK: 'num',
      S_IFMT: 'num',
      S_IFREG: 'num',
      S_IFDIR: 'num',
      S_IFCHR: 'num',
      S_IFBLK: 'num',
      S_IFIFO: 'num',
      S_IFLNK: 'num',
      S_IFSOCK: 'num',
      O_CREAT: 'num',
      O_EXCL: 'num',
      UV_FS_O_FILEMAP: 'num',
      O_NOCTTY: 'num',
      O_TRUNC: 'num',
      O_APPEND: 'num',
      O_DIRECTORY: 'num',
      O_NOATIME: 'num',
      O_NOFOLLOW: 'num',
      O_SYNC: 'num',
      O_DSYNC: 'num',
      O_DIRECT: 'num',
      O_NONBLOCK: 'num',
      S_IRWXU: 'num',
      S_IRUSR: 'num',
      S_IWUSR: 'num',
      S_IXUSR: 'num',
      S_IRWXG: 'num',
      S_IRGRP: 'num',
      S_IWGRP: 'num',
      S_IXGRP: 'num',
      S_IRWXO: 'num',
      S_IROTH: 'num',
      S_IWOTH: 'num',
      S_IXOTH: 'num',
      F_OK: 'num',
      R_OK: 'num',
      W_OK: 'num',
      X_OK: 'num',
      UV_FS_COPYFILE_EXCL: 'num',
      COPYFILE_EXCL: 'num',
      UV_FS_COPYFILE_FICLONE: 'num',
      COPYFILE_FICLONE: 'num',
      UV_FS_COPYFILE_FICLONE_FORCE: 'num',
      COPYFILE_FICLONE_FORCE: 'num',
    },
  ],
  promises: [
    'object',
    {
      access: 'fn',
      constants: {},
      copyFile: 'fn',
      cp: 'fn',
      mkdtempDisposable: 'fn',
      glob: 'fn',
      open: 'fn',
      opendir: 'fn',
      rename: 'fn',
      truncate: 'fn',
      rm: 'fn',
      rmdir: 'fn',
      mkdir: 'fn',
      readdir: 'fn',
      readlink: 'fn',
      statfs: 'fn',
      symlink: 'fn',
      lstat: 'fn',
      stat: 'fn',
      link: 'fn',
      unlink: 'fn',
      chmod: 'fn',
      lchmod: 'fn',
      lchown: 'fn',
      chown: 'fn',
      utimes: 'fn',
      lutimes: 'fn',
      realpath: 'fn',
      mkdtemp: 'fn',
      writeFile: 'fn',
      appendFile: 'fn',
      readFile: 'fn',
      watch: 'fn',
    },
  ],
  readDir: 'fn',
  readfile: 'fn',
  rmDir: 'fn',
  mkdirp: 'fn',
  rmrf: 'fn',
  getFileType: 'fn',
  getDirectories: 'fn',
  getFiles: 'fn',
  getContentType: 'fn',
  getFilePath: 'fn',
}

const fns = [
  ...Object.keys(fso),
  ...Object.keys(fso.promises),
  'readDir',
  'readfile',
  'rmDir',
  'mkdirp',
  'rmrf',
  'getFileType',
  'getDirectories',
  'getFiles',
  'getContentType',
  'getFilePath',
]

export default [
  ...version(fs, spec),
  ...fns.map(fn => ({
    fn: !fso[fn] || is.sameType(fs[fn], fso[fn]),
    info: `${fn} is a ${typeof fs[fn]}`,
  })),
  {
    fn: () => {
      let result = []
      if (fns.length > Object.keys(fs).length) {
        result = fns.filter(f => !fs.hasOwnProperty(f))

        if (result.length > 0) {
          log.warn('Spec: functions not expected', result)
        }
      } else {
        result = Object.keys(fs).filter(f => !fns.includes(f))

        if (result.length > 0) {
          log.warn('Spec: Missing Functions:', result)
        }
      }

      return result.length === 0
    },
    info: 'functions match between spec and implementation',
  },
]
